3. 오버라이딩의 정의와 필요성
 : 부모-자식 상속 관계에 있는 클래스에서 상위 클래스의 메서드를 하위 클래스에서 재정의하는 것
 : as, 조상 클래스로부터 상속받은 메서드를 자손 클래스에서 그대로 사용할 수 없는 경우가
많기 때문에 오버라이딩이 필요하다.

4. 오버라이딩의 조건으로 옳지 않은 것은?
a. . 조상의 메서드와 이름이 같아야 한다
b. . 매개변수의 수와 타입이 모두 같아야 한다
c. . 접근 제어자는 조상의 메서드보다 좁은 범위로만 변경할 수 있다	X
d. . 조상의 메서드보다 더 많은 수의 예외를 선언할 수 있다			X

6. 자손 클래스의 생성자에서 조상 클래스의 생성자를 호출해야하는 이유는?
 :  자손 클래스의 멤버가 조상 클래스의 멤버를 사용할 수도 있으므로 조상의 멤버들이 먼저 초기화되어 있어야 하기 때문
 
8. 접근제어자를 접근범위가 넓은 것에서 좁은 것의 순으로 바르게 나열한 것?
a. public-protected-(default)-private	O
b. public-(default)-protected-private	
c. (default)-public-protected-private
d. private-protected-(default)-public

9. 다음 중 제어자 final을 붙일 수 있는 대상과 붙였을 때 그 의미를 적은 것이다 
옳지 않은 것은?
a. 지역변수 - 값을 변경할 수 없다 						
b. 클래스 - 상속을 통해 클래스에 새로운 멤버를 추가할 수 없다
c. 메서드 - 오버로딩을 할 수 없다		X 오버라이딩 할 수 없다.					
d. 멤버변수 - 값을 변경할 수 없다

12.접근 제어자에 대한 설명으로 옳지 않은 것은
a. public은 접근제한이 전혀 없는 접근 제어자이다
b. (default) 가 붙으면 같은 패키지 내에서만 접근이 가능하다
c. 지역변수에도 접근 제어자를 사용할 수 있다		X
d. protected가 붙으면 같은 패키지 내에서도 접근이 가능하다
e. protected가 붙으면 다른 패키지의 자손 클래스에서 접근이 가능하다

13. Math 클래스의 생성자는 접근 제어자가 private이다 그 이유는 무엇인가
 : 인스턴스 생성을 막기 위함
 
14. final

15.  클래스가 다음과 같이 정의되어 있을 때 형변환을 올바르게 하지 않은 것?
(보기)
class Unit {}
class AirUnit extends Unit {}
class GroundUnit extends Unit {}
class Tank extends GroundUnit {}
class AirCraft extends AirUnit {}

Unit u = new GroundUnit();
Tank t = new Tank();
AirCraft ac = new AirCraft();
---
a. u = (Unit)ac;
b. u = ac;						
c. GroundUnit gu = (GroundUnit)u;		
d. AirUnit au = ac;			
e. t = (Tank)u;				X
f. GroundUnit gu = t;
 
 16. 연산결과가 가 아닌 것은?
 (보기)
class Car {}
class FireEngine extends Car implements Movable {}
class Ambulance extends Car {}

FireEngine fe = new FireEngine();
---
a. fe instanceof FireEngine
b. fe instanceof Movable
c. fe instanceof Object		
d. fe instanceof Car		
e. fe instanceof Ambulance	X

17. interface Unit -> implements Unit

21. 다음과 같이 메서드가 정의되어 있을 때, 매서드의 매개변수로 가능한 것 두가지를 적으시오
(보기)
interface Movable {
	void move(int x, int y);
}
void attack(Movable f) {
	/* 내용 생략 */ 
}
 : null, Movable인터페이스를 구현한 클래스 또는 그 자손의 인스턴스
 
 
 24. 인터페이스의 장점이 아닌 것은?
 a. . 표준화를 가능하게 해준다			
b. . 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다
c. . 독립적인 프로그래밍이 가능하다
d. . 다중상속을 가능하게 해준다
e. . 패키지간의 연결을 도와준다		X
 
 29. 지역 클래스에서 외부 클래스의 인스턴스 멤버와 멤버에 모두 접근할 수 있지만, 
 지역변수는 final 이 붙은 상수에만 접근할 수 있는 이유는?
 : 메서드가 수행을 마쳐서 지역변수가 소멸된 시점에도, 지역 클래스의 인스턴스가 소멸된 지역변수를 참조하려는 경우가 발생할 수 있기 때문이다.
 

