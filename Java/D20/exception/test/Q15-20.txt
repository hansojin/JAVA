15. Throwable을 상속하는 예외 클래스는 (Error)과 (Exception) 두 가지이다. 그런데 (Error)는 그 이름이 의미하듯이 단순히 예외라고 하기에는 심각한 오류의 상황을 표현하기 위해 정의된 클래스이다. 따라서 이 클래스를 상속하여 정의된 클래스는(이는 프로그래머가 정의하는 클래스가 아니다.) 프로그램의 실행을 멈춰야 할 정도의 매우 심각한 오류상황을 표현하는데 사용이 된다. (Error)를 상속하는 대표적인 클래스의 이름은 (VirtualMachineError) 이다.

API 문서에서는 이 클래스에 대해서 다음과 같이 설명한다.
"자바 가상머신에 문제가 생겨서 더 이상 제대로 동작할 수 없는 상황을 알리기 위해서 정의된 클래스입니다."
(Error)를 상속하는 클래스의 오류상황이 발생하면, 그냥 프로그램이 종료되도록 놔두는 것이 상책이다(프로그램이 종료된 뒤  소스코드를 수정하는 등의 방식으로 원인을 해결해야 한다.)

(Error)의 하위 클래스
(Error)를 상속하는 대표적인 클래스가 (VirtualMachineError)이다. 그리고 이를 상속하는 클래스 중에서 (OutOfMemoryError)라는 클래스가 있는데, 이는 메모리 공간이 부족한 상황을 표현하는 예외 클래스이다. 따라서 이러한 오류가 발생하면, 메모리가 효율적으로/적절히 사용되도록 소스코드 자체를 변경해야 한다. 이렇듯 Error와 관련 있는 오류상황은 소스코드의 변경을 통해서 해결해야 하는 경우가 대부분이다.

16. Exception을 상속하는 대표적인 클래스 두가지
 : RuntimeException, IOException

17. Exception을 상속하는 클래스의 예외 상황이 임의의 메소드 내에서 발생 가능하다면, 해당 메소드는 반드시 다음 두 가지 중 한가지 방법을 선택해서 정의되어야 한다.
	1) try~catch문을 이용해서 메소드 내에서 예외를 처리하도록 정의한다.
	2) throws를 이용해서 메소드를 호출한 영역으로 예외가 전달되도록 정의한다.

18. 
clone(Object 클래스의 인스턴스 메소드)
protected Object clone()
	throws CloneNotSupportedException

Creates and returns a copy of this object.
The precise meaning of "copy" may depend on the class of the object.

위의 메소드를 호출할 때
다음과 같이 호출하면 문제가 발생한다. 무엇이 문제인가?

public void simpleMethod(int n){
	MyClass my = new MyClass();
	my.clone();
	...
}
: try-catch 문을 쓰던가, throws CloneNotSupportedException을 명시하던가

19. 처리하지 않아도 되는 (RuntimeException)의 하위 클래스
Exception의 하위 클래스 중에는 (RuntimeException)이라는 클래스가 존재한다. 그런데 이 클래스는 그 성격이 Error 클래스와 비슷하다(이는 Exception을 상속하는 다른 예외 클래스들과의 차이점이다). (RuntimeException)을 상속하는 예외 클래스도 Error를 상속하는 예외 클래스와 마찬가지로 try~catch문, 또는 throws절을 이용한 예외처리를 필요로 하지 않는다. 하지만 다음과 같이 Error의 하위 클래스들과 구분되는 특징이 있다.

* (RuntimeException)을 상속하는 예외 클래스는 Error를 상속하는 예외 클래스처럼 치명적인 상황을 표현하지 않는다.
* 따라서 예외발생 이휴에도 프로그램의 실행을 이어가기 위해서 try~catch 문으로 해당 예외를 처리하기도 한다.

20. RuntimeException을 상속하는 클래스들은 무엇이 있는가?
* ArrayIndexOutOfBoundsException
* ClassCastException
* NegativeArraySizeException
* NullPointerException

예외의 성격이 보여주듯이 특별한 경우가 아니면, 이들에 대해서는 try~catch문을 이용해서 예외처리를 하지 않는다.
