6. 다음은 컴파일에러가 발생하는 소스코드이다. 무엇이 문제인가?
```
try{
	...
}
catch(Throwable e){
	...
}
catch(ArithmeticException e){
	...
}
```
: 모든 예외 클래스를 상속하는 최상위 클래스인 Throwable이 앞에 있어 컴파일 에러 발생
: throwable을 ArithmeticException 아래로 내리던가,  throwable만 쓰던가

7. finally : 예외 상황의 발생여부와 상관없이 항상 실행되는 영역에 쓰는 키워드

8. 나이를 입력 받았을 때 0보다 작은 값이 입력되면은 "유효하지 않은 나이가 입력되었습니다."라고 출력하도록 예외처리를 만드시오.

class AgeInputException extends Exception{
	public AgeInputException(){
		super("유효하지 않은 나이가 입력되었습니다.");
	}
}

9. (throw)는 예외상황이 발생되었음을 자바 가상머신에게 알리는 키워드이다. 따라서 이 문장이 실행되면서 자바의 예외처리 매커니즘이 동작하게 된다.

10. 문제8번을 메소드를 쓰지않고서 메인메소드내에서 처리해 보자.
 : if 문으로 처리

11. 문제8번을 main메소드내에서도 예외상황을 처리하지 않는다면 어떻게 해야 되는가?
 : 프로그램 종료

12. getMessage -> printStackTrace -> exit

13. 예외가 발생해서 전달되는 과정이 출력되는 메소드.
(Throwable) 클래스에 정의되어 있는 (printStackTrace) 메소드가 이러한 유형의 메시지를 출력