8.
class PlayingCard {
	int kind;
	int num;
	static int width;
	static int height;

	PlayingCard(int k, int n) {
		kind = k;
		num = n;
	}
	public static void main(String args[]) {
		PlayingCard card = new PlayingCard(1,1);
	}
}

class/static 변수 : width, height
인스턴스 변수 : kind, num
지역 변수 : k, n, " card, args " 
 
9. 
class Marine {
	int x=0, y=0; // Marine (x,y) 의 위치좌표
	int hp = 60; // 현재 체력
	int weapon = 6; // 공격력
	int armor = 0; // 방어력

	void weaponUp() {
		weapon++;
	}
	void armorUp() {
		armor++;
	}
	void move(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

(모든 병사의 공격력과 방어력이 같아야하므로) weapon, armor 에 static을 붙여야함 
또한, static 변수에 대한 작업을 하게 되니까 weaponUp(), armorUp() 메소드에도 static을 붙여야 함


10. 생성자에 대한 설명으로 옳지 않은 것
a. . 모든 생성자의 이름은 클래스의 이름과 동일해야한다	
b. . 생성자는 객체를 생성하기 위한 것이다			X : 초기화를 위한 것
c. . 클래스에는 생성자가 반드시 하나 이상 있어야 한다		
d. . 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다	
e. . 생성자는 오버로딩 할 수 없다				X : 생성자도 method니까 가능


11. this에 대한 설명으로 옳지 않은 것
a. . 객체 자신을 가리키는 참조변수이다		
b. . 클래스 내에서라면 어디서든 사용할 수 있다		X : 인스턴스에서만 사용 가능
c. . 지역변수와 인스턴스변수를 구별할 때 사용한다	  
d. . 클래스 메서드 내에서는 사용할 수 없다		

12. overloading이 성립하기 위한 조건이 아닌것
a. . 메서드의 이름이 같아야 한다			
b. . 매개변수의 개수나 타입이 달라야 한다
c. . 리턴타입이 달라야 한다				X
d. . 매개변수의 이름이 달라야 한다			X 

13. long add(int a, int b) { return a+b;} 을 올바르게 오버로딩 한것은?
a. long add(int x, int y) { return x+y;}
b. long add(long a, long b) { return a+b;}		O
c. int add(byte a, byte b) { return a+b;}		O
d. int add(long a, int b) { return (int)(a+b);}		O

14. 초기화에 대한 설명으로 옳지 않은 것
a. . 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참조할 수 있다	
b. . 지역변수는 사용하기 전에 반드시 초기화해야 한다
c. . 초기화 블럭보다 생성자가 먼저 수행된다		X
d. . 명시적 초기화를 제일 우선적으로 고려해야 한다
e. . 클래스변수보다 인스턴스변수가 먼저 초기화된다	X

15. 인스턴스변수의 초기화 순서가 올바른 것
a. - - - 기본값 명시적초기화 초기화블럭 생성자		O
b. - - - 기본값 명시적초기화 생성자 초기화블럭
c. - - - 기본값 초기화블럭 명시적초기화 생성자
d. - - - 기본값 초기화블럭 생성자 명시적초기화		

  == 변수의 초기화 순서 == 
클래스변수의 초기화시점 : 클래스가 처음 로딩될 때 단 한번 초기화 된다
클래스변수의 초기화순서 : 기본값 > 명시적초기화 > 클래스 초기화 블럭

인스턴스변수의 초기화시점 : 인스턴스가 생성될 때마다 각 인스턴스별로 초기화가 이루어진다
인스턴스변수의 초기화순서 : 기본값 > 명시적초기화 > 인스턴스 초기화 블럭 > 생성자

16. 지역변수에 대한 설명으로 옳지 않은 것
a. . 자동 초기화되므로 별도의 초기화가 필요없다				X
b. . 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다
c. . 매서드의 매개변수로 선언된 변수도 지역변수이다			
d. . 클래스변수나 인스턴스변수보다 메모리 부담이 적다
e. (heap) . 힙 영역에 생성되며 가비지 컬렉터에 의해 소멸된다		X

17. 호출 스택에 (main>method2>method1>println) 이런 상황일 때 옳지 않은 것
a. main . 제일 먼저 호출스택에 저장된 것은 메서드이다
b. println . 메서드를 제외한 나머지 메서드들은 모두 종료된 상태이다	X
c. method2 메서드를 호출한 것은 main 메서드이다
d. println 메서드가 종료되면 method1 메서드가 수행을 재개한다
e. main-method2-method1-println . 의 순서로 호출되었다
f. println . 현재 실행중인 메서드는 뿐이다 			// 나머지는 대기		



