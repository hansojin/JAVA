<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
	
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	<bean id="log" class="com.springbook.biz.common.LogAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		<!-- 모든 반환 타입 / 해당 패키지명 포함 하위 / Impl로 끝나는 모든 클래스 / 모든 메서드 -->
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
		<!-- 모든 반환 타입 / 해당 패키지명 포함 하위 / Impl로 끝나는 모든 클래스 / get으로 시작하는 메서드 -->
		<aop:aspect ref="log">
			<aop:before method="printLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>
</beans>

<!-- 
비즈니스 로직 (Business Logic)
업무에 필요한 데이터 처리를 수행하는 응용 프로그램의 일부 Data 처리를 수행하기 위해 Data를 활용하여 계산, 판단, 가공 등을 하는 ‘Logic’을 의미. 
대부분의 Client Program은 User Interface와 Business Logic으로 구성되며, server Program은 대부분 Business Logic으로 구성된다.
-> 프로그래밍에서 비즈니스 로직은 요구사항을 직접 해결하는 영역이기 때문에 유지 보수에 신경쓰지 않는다면 생산성과 품질이 저하된다

비즈니스 메소드(business method)
비즈니스 로직 또는 애플리케이션 규칙을 구현하는 엔터프라이즈 Bean 메소드. (Sun)

<< AOP 용어 정리 >>

- 조인포인트(Joinpoint)
: 클라이언트가 호출하는 모든 비즈니스 메소드

- 포인트컷(Pointcut)
: 필터링된 조인포인트

- 어드바이스(Advice)
: 횡단 관심에 해당하는 공통 기능의 코드를 의미하며, 독립된 클래스의 메소드로 작성된다. 
: 어드바이스로 구현된 메소드가 언제 동작할지 스프링 설정 파일을 통해서 지정할 수 있다.
: 스프링에서는 어드바이스의 동작 시점을 'before', 'after', after-returning', 'after-throwing', 'around'등 다섯 가지로 지정할 수 있다.

- 위빙(Weaving)
: 위빙은 포인트컷으로 지정한 핵심 관심 메소드가 호출될 때, 어드바이스에 해당하는 횡단 관심 메소드가 삽입되는 과정을 의미한다.
: 위빙을 처리하는 방식은 크게 컴파일타임(Compiletime) 위빙, 로딩타임(Loadingtime) 위빙, 런타임(Runtime) 위빙이 있지만, 스프링에서는 런타임 위빙 방식만 지원한다.

- 애스팩트(Aspect)
: 애스팩트는 포인트컷과 어드바이스의 결합으로서, 어떤 포인트컷 메소드에 대해서 어떤 어드바이스 메소드를 실행할지 결정한다.
: 애스팩트를 설정할 때는 <aop:aspect> 엘리먼트를 사용하는데, 가끔 <aop:aspect> 대신에 <aop:advisor> 엘리먼트를 사용하는 경우가 있다. 
: 대표적인 상황이 트랜잭션 설정인데 트랜잭션 설정에서는 <aop:advisor>를 사용한다.

<< 포인트컷 표현식 >>

포인트컷을 이용하면 어드바이스 메소드가 적용될 비즈니스 메소드를 정확하게 필터링할 수 있는데, 이때 다양한 포인트컷 표현식을 사용할 수 있다. 
포인트컷 표현식은 메소드처럼 생긴 execution 명시자를 이용하며, execution 명시자 안에 포인트컷 표현식을 기술한다.

execution (* com.multicapus.biz..*Impl.get*(..)) _ 리턴타입 패키지 경로 클래스명 메소드명 매개변수

- 리턴타입 지정
리턴타입 지정에서 가장 기본적인 방법은 '*' 캐릭터를 이용하는 것이다.
*		모든 리턴타입 허용
void	리턴타입이 void 메소드 선택
!void	리턴타입이 void가 아닌 메소드 선택

- 패키지 지정
패키지 경로를 지정할 때는 '*', '..' 캐릭터를 이용한다.

표현식					설명
com.springbook.biz		정확하게 com.springbook.biz 패키지만 선택
com.springbook.biz..	com.springbook.biz 패키지로 시작하는 모든 패키지 선택
com.springbook..impl	com.springbook 패키지로 시작하면서 마지막 패키지 이름이 impl로 끝나는 패키지 선택

- 클래스 지정
클래스 이름을 지정할 때는 '*', '+' 캐릭터를 이용한다.

표현식				설명
BoardServiceImpl	정확하게 BoardServiceImpl 클래스만 선택
*Impl				클래스 이름이 Impl로 끝나는 클래스만 선택
BoardService+		클래스 이름 뒤에 '+'가 붙으면 해당 클래스로부터 파생된 모든 자식 클래스 선택, 
					인터페이스 뒤에 '+'가 붙으면 해당 인터페이스를 구현한 모든 클래스 선택

- 메소드 지정
메소드를 지정할 때는 주로 '*' 캐릭터를 사용하고 매개변수를 지정할 때는 '..'을 사용한다.

표현식			설명
*(..)			가장 기본 설정으로 모든 메소드 선택
get*(..)		메소드 이름이 get으로 시작하는 모든 메소드 선택

- 매개변수 지정
매개변수를 지정할 때는 '..', '*', 캐릭터를 사용하거나 정확한 타입을 지정한다.

표현식							설명
(..)							가장 기본 설정으로서 '..'은 매개변수의 개수와 타입에 제약이 없음을 의미
(*)								반드시 1개의 매개변수를 가지는 메소드만 선택
(com.springbook.user.UserVO)	매개변수로 UserVO를 가지는 메소드만 선택, 이때 클래스의 패키지 경로가 반드시 포함되어야 함
(!com.springbook.user.UserVO)	매개변수로 UserVO를 가지지 않는 메소드만 선택
(Integer, ..)					한 개 이상의 매개변수를 가지되, 첫번째 매개변수의 타입이 Integer인 메소드만 선택
(Integer, *)					반드시 두 개의 매개변수를 가지되, 첫 번째 매개변수의 타입이 Integer인 메소드만 선택
 -->