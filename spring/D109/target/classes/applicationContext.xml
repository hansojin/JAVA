<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>

	<bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>
	<bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean>
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	<bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>
	

	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointCut"/>
		<aop:pointcut expression ="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
		
		<aop:aspect ref="before">
			<aop:before method="beforeLog" pointcut-ref="allPointCut"/>
		</aop:aspect>
		<aop:aspect ref="after">
			<aop:after method="afterLog" pointcut-ref="allPointCut"/>
		</aop:aspect>
		<aop:aspect ref="afterReturning">
			<aop:after-returning method="afterLog" pointcut-ref="getPointcut" />
		</aop:aspect>
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing method="exceptionLog" pointcut-ref="allPointCut"/>
		</aop:aspect>
		<aop:aspect ref="around">
			<aop:around method="aroundLog" pointcut-ref="allPointCut" />
		</aop:aspect>
	</aop:config>
</beans>


<!--  << 어드바이스 동작 시점 >>
어드바이스는 각 조인포인트에 삽입되어 동작할 횡단 관심에 해당하는 공통 기능이며, 동작시점은 각 AOP 기술마다 다르다. 스프링에서는 다섯 가지의 동작 시점을 제공한다.

동작 시점		설명
Before		비즈니스 메소드 실행 전 동작
After		- After Returning : 비즈니스 메소드가 성공적으로 리턴되면 동작
			- After Throwing : 비즈니스 메소드 실행 중 예외가 발생하면 동작(마치 try ~ catch 블록에서 catch 블록에 해당)
			- After : 비즈니스 메소드가 실행된 후, 무조건 실행(try~catch~finally 블록에서 finally 블록에 해당)
Around		Around 메소드 호출 자체를 가로채 비즈니스 메소드 실행 전후에 처리할 로직을 삽입할 수 있음)

어드바이스 메소드의 동작 시점은 <aop:aspect> 엘리먼트 하위에 각각 
<aop:before>, <aop:after-returning>, <aop:after-throwing>, <aop:after>, <aop:after-around> 엘리먼트를 이용하여 지정한다.
 -->