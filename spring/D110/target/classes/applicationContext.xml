<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<context:property-placeholder location="classpath:config/database.properties"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="boardPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="boardPointcut" />
	</aop:config>
</beans>

<!-- 
	JdbcTemplate 클래스가 JDBC API를 이용하여 DB 연동을 처리하려면 반드시 데이터베이스로부터 커넥션을 얻어야 한다. 
	따라서 JdbcTemplate 객체가 사용할 DataSource를 <bean> 등록하여 스프링 컨테이너가 생성하도록 해야 한다.
	
	프로퍼티 파일을 사용하려면 <context:property-placeholder> 엘리먼트로 프로퍼티 파일의 위치를 등록해야 한다. 
	그리고 "${}" 구문을 이용하여 프로퍼티 이름을 지정하면 프로퍼티 값으로 치환되어 실행된다.
	
	<< 트랜잭션 관리자 등록 >>
	
	트랜잭션 관련 설정에서 가장 먼저 등록하는 것은 트랜잭션 관리자 클래스이다. 
	스프링은 다양한 트랜잭션 관리자를 지원하는데, 어떤 기술을 이용하여 데이터베이스 연동을 처리했느냐에 따라 트랜잭션 관리자가 달라진다. 
	그리고 모든 트랜잭션 관리자는 PlatformTransactionManager 인터페이스를 구현한 크래스들이다.
	
	// PlatformTransactionManager.java
	public interface PlatformTransactionManager{
		TransactionStatus getTransaction(TransactionDefinition definition) throws TranscationException;
		void commit(TransactionStatus status) throws TransactionException;
		void rollback(TransactionStatus status) throws TransactionException;
	}
	
	위처럼 스프링이 제공하는 모든 트랜잭션 관리자는 트랜잭션 관리에 필요한 commit(), rollback() 메소드를 가지고 있다.
	
	우리는 DataSourceTransactionManager 클래스를 이용하여 트랜잭션을 처리할 것이다. 
	이는 현재 우리가 가지고 있는 두 개의 DAO 클래스는 모두 JDBC를 기반으로 동작하기 때문이다.
	다음과 같이 스프링 설정 파일(applicationContext.xml)에 DataSourceTransactionManager 클래스를 <bean> 등록한다.
	
	// Transaction 설정
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<< 트랜잭션 어드바이스 설정 >>
	트랜잭션 관리 기능의 어드바이스는 <tx:advice> 앨리먼트를 사용하여 설정한다.

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	지금까지는 AOP 관련 설정에 사용한 모든 어드바이스 클래스를 우리가 직접 구현했었다.
	하지만 트랜잭션 관리 기능의 어드바이스는 직접 구현하지 않으며, 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동으로 생성한다.
	이 말은 트랜잭션 관리 어드바이스 객체에 클래스 이름이나 메소드를 확인할 수 없다는 의미이기도 하다. 
	우리가 할 수 있는 것은 단지 생성되는 어드바이스의 아이디를 id 속성으로, 어드바이스 객체가 사용할 트랜잭션 관리자를 transaction-manager 속성으로 지정할 뿐이다.
	위 설정은 txAdvice라는 어드바이스가 앞에서 설정한 txManager를 이용하여 트랜잭션을 관리한다는 설정이다. 
	그리고 <tx:attibutes>의 자식 엘리먼트로 <tx:method> 엘리먼트를 이용하여 트랜잭션을 적용할 메소드를 지정할 수 있다. 
	위 설정은 get으로 시작하는 모든 메소드는 read-only="true" 즉, 읽기 전용으로 처리되어 트랜잭션 관리 대상에서 제외하고 나머지 메소드들은 트랜잭션 관리에 포함한 것이다.

	다음은 <tx:method> 엘리먼트가 가질 수 있는 속성들에 대한 설명이다.

	속성				설명
	name			트랜잭션이 적용될 메소드 이름 지정
	read-only		읽기 전용 여부 지정(기본값 false)
	no-rollback-for	트랜잭션을 롤백하지 않을 예외 지정
	rollback-for	트랜잭션을 롤백할 예외 지정

	AOP 설정을 통한 트랜잭션 적용
	트랜잭션 관리 어드바이스까지 설정했으면 비즈니스 메소드 실행 후에 트랜잭션 관리 어드바이스가 동작하도록 AOP 설정만 추가하면 된다. 
	이때 <aop:aspect> 엘리먼트를 사용하지 않고 <aop:advisor> 앨리먼트를 사용한다는 점이 기존 AOP 설정과 다르다. 
	우리는 앞에서 포인트컷과 어드바이스를 결합할 때 <aop:aspect> 엘리먼트를 사용했다.

	그러나 <aop:aspect> 엘리먼트를 사용하려면 포인트컷과 결합할 어드바이스 객체의 아이디와 어드바이스 메소드 이름을 알아야 한다. 
	그래야지만 <aop:aspect> 엘리먼트를 이용하여 설정할 수 있다.

	그러나 트랜잭션 관리 어드바이스는 우리가 직접 클래스를 구현하지 않고, <tx:advice> 설정 때문에 
	스프링 컨테이너가 자동으로 생성하므로 어드바이스 메소드 이름을 알 수 없다. 
	결국, 어드바이스 메소드 이름을 몰라서 <aop:aspect> 엘리먼트를 사용할 수 없는 것이다.
	앞에서 <aop:advisor>와 <aop:aspect>는 같은 기능의 엘리먼트라고 설명했다. 
	즉, 어드바이저 역시 포인트컷과 어드바이스의 결합이라는 측면에서 같으며, 다음처럼 txPointcut으로 지정한 메소드가 호출될 때, 
	txAdvice로 등록한 어드바이스가 동작하여 트랜잭션을 관리하도록 설정하면 된다.
	
	<< 트랜잭션 동작 순서 >>
	트랜잭션 설정이 어떤 순서로 동작하는지 알아보면
		1. 클라이언트가 BoardSercviceImpl 객체의 insertBoard() 메소드를 호출하면,
		2. insertBoard() 메소드의 비즈니스 로직이 수행된다. 만약 insertBoard() 메소드 수행 중에 문제가 발생하면
		3. txAdvice로 등록한 어드바이스가 동작하여, 참조하는 
		4. txManager의 rollback() 메소드를 호출한다. 만약 문제없이 정상으로 수행되었다면 commit() 메소드를 호출한다.
 -->